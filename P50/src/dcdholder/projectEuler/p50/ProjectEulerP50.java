package dcdholder.projectEuler.p50;

public class ProjectEulerP50 {
	public static void main(String[] args) {
		System.out.println("GOAL: The goal of Project Euler problem 50 is to find the longest sequence of primes which sum to another prime under 1000000.");
		System.out.println("OUTPUT: The solution is the prime generated by that sum of a consecutive primes.");
		sumConsecutivePrimes();
	}
	
	private static void sumConsecutivePrimes() {
		int maxPrimeToGenerate = 1001000; //sieve size - must include a few primes over 1000000 to prevent exceptions from being thrown
		int targetPrime        = 5;       //seeding with a known sum of primes - 2+3
		int maxGlobalSummands  = 0;       //the maximum sequence size thus far

		Sieve sieve = new Sieve(maxPrimeToGenerate); //primes are only generated once
		
		//sum the sequence of primes indexed from j onwards, for each reasonable j
		//the sum of the first 547 primes is over 1000000, which gives us an upper bound on a valid prime sequence length
		//there are 78498 primes below 1000000
		//an upper bound on the number of addition operations that will need to be performed is then about 4.3*10^6
		for(int j=1;j<=maxPrimeToGenerate;j++) {
			if(sieve.getPrimeByIndex(j)>1000000) {
				break;
			}

			int currentSum = sieve.getPrimeByIndex(j);
			int currentSummands = 1;

			for(int i=j+1;currentSum<=1000000;i++) {
				currentSum += sieve.getPrimeByIndex(i);
				currentSummands++;
				if(currentSummands>maxGlobalSummands && currentSum<1000000) {
					if(sieve.isPrime(currentSum)) { //this is a constant-time operation
						maxGlobalSummands = currentSummands;
						targetPrime = currentSum;
					}		
				}
			}
		}
		
		System.out.println("The number of consecutive prime summands required to reach the prime " + targetPrime + " was " + maxGlobalSummands + ".");
	}
}
